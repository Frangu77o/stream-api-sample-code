//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Betfair.ESAClient
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "http://stream-api.betfair.com:443/api";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="requestMessage">Requests are sent to socket</param>
        /// <returns>Responses are received from socket</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AllResponseTypesExample> RequestAsync(AllRequestTypesExample requestMessage)
        {
            return RequestAsync(requestMessage, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="requestMessage">Requests are sent to socket</param>
        /// <returns>Responses are received from socket</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AllResponseTypesExample> RequestAsync(AllRequestTypesExample requestMessage, System.Threading.CancellationToken cancellationToken)
        {
            if (requestMessage == null)
                throw new System.ArgumentNullException("requestMessage");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/request");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestMessage, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AllResponseTypesExample>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "op")]
    [JsonInheritanceAttribute("HeartbeatMessage", typeof(HeartbeatMessage))]
    [JsonInheritanceAttribute("OrderSubscriptionMessage", typeof(OrderSubscriptionMessage))]
    [JsonInheritanceAttribute("MarketSubscriptionMessage", typeof(MarketSubscriptionMessage))]
    [JsonInheritanceAttribute("AuthenticationMessage", typeof(AuthenticationMessage))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestMessage 
    {
        /// <summary>Client generated unique id to link request with response (like json rpc)</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AuthenticationMessage : RequestMessage
    {
        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Session { get; set; }
    
        [Newtonsoft.Json.JsonProperty("appKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppKey { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketSubscriptionMessage : RequestMessage
    {
        /// <summary>Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block</summary>
        [Newtonsoft.Json.JsonProperty("segmentationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SegmentationEnabled { get; set; }
    
        /// <summary>Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription</summary>
        [Newtonsoft.Json.JsonProperty("clk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clk { get; set; }
    
        /// <summary>Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)</summary>
        [Newtonsoft.Json.JsonProperty("heartbeatMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HeartbeatMs { get; set; }
    
        /// <summary>Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription</summary>
        [Newtonsoft.Json.JsonProperty("initialClk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialClk { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketFilter MarketFilter { get; set; }
    
        /// <summary>Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)</summary>
        [Newtonsoft.Json.JsonProperty("conflateMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConflateMs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketDataFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketDataFilter MarketDataFilter { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketFilter 
    {
        [Newtonsoft.Json.JsonProperty("countryCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CountryCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bettingTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BettingTypes> BettingTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("turnInPlayEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TurnInPlayEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MarketTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("venues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Venues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MarketIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventTypeIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EventTypeIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EventIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bspMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BspMarket { get; set; }
    
        [Newtonsoft.Json.JsonProperty("raceTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RaceTypes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketDataFilter 
    {
        [Newtonsoft.Json.JsonProperty("ladderLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LadderLevels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Fields> Fields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderSubscriptionMessage : RequestMessage
    {
        /// <summary>Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block</summary>
        [Newtonsoft.Json.JsonProperty("segmentationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SegmentationEnabled { get; set; }
    
        /// <summary>Optional filter applied to order subscription</summary>
        [Newtonsoft.Json.JsonProperty("orderFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderFilter OrderFilter { get; set; }
    
        /// <summary>Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription</summary>
        [Newtonsoft.Json.JsonProperty("clk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clk { get; set; }
    
        /// <summary>Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)</summary>
        [Newtonsoft.Json.JsonProperty("heartbeatMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HeartbeatMs { get; set; }
    
        /// <summary>Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription</summary>
        [Newtonsoft.Json.JsonProperty("initialClk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialClk { get; set; }
    
        /// <summary>Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)</summary>
        [Newtonsoft.Json.JsonProperty("conflateMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConflateMs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderFilter 
    {
        /// <summary>Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true</summary>
        [Newtonsoft.Json.JsonProperty("includeOverallPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeOverallPosition { get; set; }
    
        /// <summary>Internal use only &amp; should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.</summary>
        [Newtonsoft.Json.JsonProperty("accountIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> AccountIds { get; set; }
    
        /// <summary>Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)</summary>
        [Newtonsoft.Json.JsonProperty("customerStrategyRefs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomerStrategyRefs { get; set; }
    
        /// <summary>Returns strategy positions (See: OrderRunnerChange.smc=Map&lt;customerStrategyRef, StrategyMatchChange&gt;) - these are sent in delta format as per overall position. Default=false</summary>
        [Newtonsoft.Json.JsonProperty("partitionMatchedByStrategyRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartitionMatchedByStrategyRef { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HeartbeatMessage : RequestMessage
    {
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "op")]
    [JsonInheritanceAttribute("MarketChangeMessage", typeof(MarketChangeMessage))]
    [JsonInheritanceAttribute("ConnectionMessage", typeof(ConnectionMessage))]
    [JsonInheritanceAttribute("OrderChangeMessage", typeof(OrderChangeMessage))]
    [JsonInheritanceAttribute("StatusMessage", typeof(StatusMessage))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResponseMessage 
    {
        /// <summary>Client generated unique id to link request with response (like json rpc)</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConnectionMessage : ResponseMessage
    {
        /// <summary>The connection id</summary>
        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StatusMessage : ResponseMessage
    {
        /// <summary>The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.</summary>
        [Newtonsoft.Json.JsonProperty("connectionsAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConnectionsAvailable { get; set; }
    
        /// <summary>Additional message in case of a failure</summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        /// <summary>The type of error in case of a failure</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusMessageErrorCode? ErrorCode { get; set; }
    
        /// <summary>The connection id</summary>
        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionId { get; set; }
    
        /// <summary>Is the connection now closed</summary>
        [Newtonsoft.Json.JsonProperty("connectionClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConnectionClosed { get; set; }
    
        /// <summary>The status of the last request</summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusMessageStatusCode? StatusCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketChangeMessage : ResponseMessage
    {
        /// <summary>Change Type - set to indicate the type of change - if null this is a delta)</summary>
        [Newtonsoft.Json.JsonProperty("ct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketChangeMessageCt? Ct { get; set; }
    
        /// <summary>Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)</summary>
        [Newtonsoft.Json.JsonProperty("clk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clk { get; set; }
    
        /// <summary>Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)</summary>
        [Newtonsoft.Json.JsonProperty("heartbeatMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HeartbeatMs { get; set; }
    
        /// <summary>Publish Time (in millis since epoch) that the changes were generated</summary>
        [Newtonsoft.Json.JsonProperty("pt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Pt { get; set; }
    
        /// <summary>Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)</summary>
        [Newtonsoft.Json.JsonProperty("initialClk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialClk { get; set; }
    
        /// <summary>MarketChanges - the modifications to markets (will be null on a heartbeat</summary>
        [Newtonsoft.Json.JsonProperty("mc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MarketChange> Mc { get; set; }
    
        /// <summary>Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)</summary>
        [Newtonsoft.Json.JsonProperty("conflateMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConflateMs { get; set; }
    
        /// <summary>Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented</summary>
        [Newtonsoft.Json.JsonProperty("segmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketChangeMessageSegmentType? SegmentType { get; set; }
    
        /// <summary>Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketChange 
    {
        /// <summary>Runner Changes - a list of changes to runners (or null if un-changed)</summary>
        [Newtonsoft.Json.JsonProperty("rc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RunnerChange> Rc { get; set; }
    
        /// <summary>Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)</summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Img { get; set; }
    
        /// <summary>The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)</summary>
        [Newtonsoft.Json.JsonProperty("tv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tv { get; set; }
    
        /// <summary>Conflated - have more than a single change been combined (or null if not conflated)</summary>
        [Newtonsoft.Json.JsonProperty("con", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Con { get; set; }
    
        /// <summary>Market Definition - the definition of the market (or null if un-changed)</summary>
        [Newtonsoft.Json.JsonProperty("marketDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketDefinition MarketDefinition { get; set; }
    
        /// <summary>Market Id - the id of the market</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketDefinition 
    {
        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Venue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("raceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RaceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eachWayDivisor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EachWayDivisor { get; set; }
    
        /// <summary>The market regulators.</summary>
        [Newtonsoft.Json.JsonProperty("regulators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Regulators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketBaseRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MarketBaseRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfWinners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfWinners { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).</summary>
        [Newtonsoft.Json.JsonProperty("lineMaxUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LineMaxUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InPlay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("betDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BetDelay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bspMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BspMarket { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bettingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketDefinitionBettingType? BettingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfActiveRunners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfActiveRunners { get; set; }
    
        /// <summary>For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).</summary>
        [Newtonsoft.Json.JsonProperty("lineMinUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LineMinUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("crossMatching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CrossMatching { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runnersVoidable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnersVoidable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("turnInPlayEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TurnInPlayEnabled { get; set; }
    
        /// <summary>Definition of the price ladder type and any related data.</summary>
        [Newtonsoft.Json.JsonProperty("priceLadderDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriceLadderDefinition PriceLadderDefinition { get; set; }
    
        /// <summary>Definition of a markets key line selection (for valid markets), comprising the selectionId and handicap of the team it is applied to.</summary>
        [Newtonsoft.Json.JsonProperty("keyLineDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeyLineDefinition KeyLineDefinition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("suspendTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SuspendTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("discountAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DiscountAllowed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("persistenceEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PersistenceEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RunnerDefinition> Runners { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Version { get; set; }
    
        /// <summary>The Event Type the market is contained within.</summary>
        [Newtonsoft.Json.JsonProperty("eventTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; }
    
        [Newtonsoft.Json.JsonProperty("openDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpenDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MarketTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bspReconciled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BspReconciled { get; set; }
    
        /// <summary>For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.</summary>
        [Newtonsoft.Json.JsonProperty("lineInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LineInterval { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketDefinitionStatus? Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RunnerDefinition 
    {
        [Newtonsoft.Json.JsonProperty("sortPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortPriority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("removalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RemovalDate { get; set; }
    
        /// <summary>Selection Id - the id of the runner (selection)</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Handicap - the handicap of the runner (selection) (null if not applicable)</summary>
        [Newtonsoft.Json.JsonProperty("hc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Hc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adjustmentFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AdjustmentFactor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bsp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bsp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunnerDefinitionStatus? Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PriceLadderDefinition 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PriceLadderDefinitionType? Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyLineDefinition 
    {
        [Newtonsoft.Json.JsonProperty("kl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<KeyLineSelection> Kl { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyLineSelection 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Hc { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RunnerChange 
    {
        /// <summary>The total amount matched. This value is truncated at 2dp.</summary>
        [Newtonsoft.Json.JsonProperty("tv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tv { get; set; }
    
        /// <summary>Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("batb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Batb { get; set; }
    
        /// <summary>Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("spb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Spb { get; set; }
    
        /// <summary>Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("bdatl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Bdatl { get; set; }
    
        /// <summary>Traded - PriceVol tuple delta of price changes (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("trd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Trd { get; set; }
    
        /// <summary>Starting Price Far - The far starting price (or null if un-changed)</summary>
        [Newtonsoft.Json.JsonProperty("spf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Spf { get; set; }
    
        /// <summary>Last Traded Price - The last traded price (or null if un-changed)</summary>
        [Newtonsoft.Json.JsonProperty("ltp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ltp { get; set; }
    
        /// <summary>Available To Back - PriceVol tuple delta of price changes (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("atb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Atb { get; set; }
    
        /// <summary>Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("spl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Spl { get; set; }
    
        /// <summary>Starting Price Near - The far starting price (or null if un-changed)</summary>
        [Newtonsoft.Json.JsonProperty("spn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Spn { get; set; }
    
        /// <summary>Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("atl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Atl { get; set; }
    
        /// <summary>Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("batl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Batl { get; set; }
    
        /// <summary>Selection Id - the id of the runner (selection)</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Handicap - the handicap of the runner (selection) (null if not applicable)</summary>
        [Newtonsoft.Json.JsonProperty("hc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Hc { get; set; }
    
        /// <summary>Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)</summary>
        [Newtonsoft.Json.JsonProperty("bdatb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Bdatb { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderChangeMessage : ResponseMessage
    {
        /// <summary>Change Type - set to indicate the type of change - if null this is a delta)</summary>
        [Newtonsoft.Json.JsonProperty("ct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderChangeMessageCt? Ct { get; set; }
    
        /// <summary>Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)</summary>
        [Newtonsoft.Json.JsonProperty("clk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clk { get; set; }
    
        /// <summary>Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)</summary>
        [Newtonsoft.Json.JsonProperty("heartbeatMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HeartbeatMs { get; set; }
    
        /// <summary>Publish Time (in millis since epoch) that the changes were generated</summary>
        [Newtonsoft.Json.JsonProperty("pt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Pt { get; set; }
    
        /// <summary>OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat</summary>
        [Newtonsoft.Json.JsonProperty("oc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderMarketChange> Oc { get; set; }
    
        /// <summary>Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)</summary>
        [Newtonsoft.Json.JsonProperty("initialClk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialClk { get; set; }
    
        /// <summary>Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)</summary>
        [Newtonsoft.Json.JsonProperty("conflateMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConflateMs { get; set; }
    
        /// <summary>Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented</summary>
        [Newtonsoft.Json.JsonProperty("segmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderChangeMessageSegmentType? SegmentType { get; set; }
    
        /// <summary>Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderMarketChange 
    {
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AccountId { get; set; }
    
        /// <summary>Order Changes - a list of changes to orders on a selection</summary>
        [Newtonsoft.Json.JsonProperty("orc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderRunnerChange> Orc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("closed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Closed { get; set; }
    
        /// <summary>Market Id - the id of the market the order is on</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FullImage { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderRunnerChange 
    {
        /// <summary>Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)</summary>
        [Newtonsoft.Json.JsonProperty("mb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Mb { get; set; }
    
        /// <summary>Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference</summary>
        [Newtonsoft.Json.JsonProperty("smc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, StrategyMatchChange> Smc { get; set; }
    
        /// <summary>Unmatched Orders - orders on this runner (selection) that are not fully matched</summary>
        [Newtonsoft.Json.JsonProperty("uo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Order> Uo { get; set; }
    
        /// <summary>Selection Id - the id of the runner (selection)</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Handicap - the handicap of the runner (selection) (null if not applicable)</summary>
        [Newtonsoft.Json.JsonProperty("hc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Hc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FullImage { get; set; }
    
        /// <summary>Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)</summary>
        [Newtonsoft.Json.JsonProperty("ml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Ml { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Order 
    {
        /// <summary>Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderSide? Side { get; set; }
    
        /// <summary>Size Voided - the amount of the order that has been voided</summary>
        [Newtonsoft.Json.JsonProperty("sv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sv { get; set; }
    
        /// <summary>Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)</summary>
        [Newtonsoft.Json.JsonProperty("pt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderPt? Pt { get; set; }
    
        /// <summary>Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)</summary>
        [Newtonsoft.Json.JsonProperty("ot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderOt? Ot { get; set; }
    
        /// <summary>Lapse Status Reason Code - the reason that some or all of this order has been lapsed (null if no portion of the order is lapsed</summary>
        [Newtonsoft.Json.JsonProperty("lsrc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lsrc { get; set; }
    
        /// <summary>Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps</summary>
        [Newtonsoft.Json.JsonProperty("p", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? P { get; set; }
    
        /// <summary>Size Cancelled - the amount of the order that has been cancelled</summary>
        [Newtonsoft.Json.JsonProperty("sc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sc { get; set; }
    
        /// <summary>Regulator Code - the regulator of the order</summary>
        [Newtonsoft.Json.JsonProperty("rc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rc { get; set; }
    
        /// <summary>Size - the original placed size of the order</summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S { get; set; }
    
        /// <summary>Placed Date - the date the order was placed</summary>
        [Newtonsoft.Json.JsonProperty("pd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Pd { get; set; }
    
        /// <summary>Regulator Auth Code - the auth code returned by the regulator</summary>
        [Newtonsoft.Json.JsonProperty("rac", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rac { get; set; }
    
        /// <summary>Matched Date - the date the order was matched (null if the order is not matched)</summary>
        [Newtonsoft.Json.JsonProperty("md", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Md { get; set; }
    
        /// <summary>Cancelled Date - the date the order was cancelled (null if the order is not cancelled)</summary>
        [Newtonsoft.Json.JsonProperty("cd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Cd { get; set; }
    
        /// <summary>Lapsed Date - the date the order was lapsed (null if the order is not lapsed)</summary>
        [Newtonsoft.Json.JsonProperty("ld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ld { get; set; }
    
        /// <summary>Size Lapsed - the amount of the order that has been lapsed</summary>
        [Newtonsoft.Json.JsonProperty("sl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sl { get; set; }
    
        /// <summary>Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.</summary>
        [Newtonsoft.Json.JsonProperty("avp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Avp { get; set; }
    
        /// <summary>Size Matched - the amount of the order that has been matched</summary>
        [Newtonsoft.Json.JsonProperty("sm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sm { get; set; }
    
        /// <summary>Order Reference - the customer's order reference for this order (empty string if one was not set)</summary>
        [Newtonsoft.Json.JsonProperty("rfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rfo { get; set; }
    
        /// <summary>Bet Id - the id of the order</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>BSP Liability - the BSP liability of the order (null if the order is not a BSP order)</summary>
        [Newtonsoft.Json.JsonProperty("bsp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bsp { get; set; }
    
        /// <summary>Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)</summary>
        [Newtonsoft.Json.JsonProperty("rfs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rfs { get; set; }
    
        /// <summary>Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatus? Status { get; set; }
    
        /// <summary>Size Remaining - the amount of the order that is remaining unmatched</summary>
        [Newtonsoft.Json.JsonProperty("sr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sr { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StrategyMatchChange 
    {
        /// <summary>Matched Backs - matched amounts by distinct matched price on the Back side for this strategy</summary>
        [Newtonsoft.Json.JsonProperty("mb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Mb { get; set; }
    
        /// <summary>Matched Lays - matched amounts by distinct matched price on the Lay side for this strategy</summary>
        [Newtonsoft.Json.JsonProperty("ml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>> Ml { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AllRequestTypesExample 
    {
        [Newtonsoft.Json.JsonProperty("opTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllRequestTypesExampleOpTypes? OpTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heartbeat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeartbeatMessage Heartbeat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderSubscriptionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderSubscriptionMessage OrderSubscriptionMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketSubscription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketSubscriptionMessage MarketSubscription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("authentication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthenticationMessage Authentication { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AllResponseTypesExample 
    {
        [Newtonsoft.Json.JsonProperty("opTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllResponseTypesExampleOpTypes? OpTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketChangeMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketChangeMessage MarketChangeMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("connection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectionMessage Connection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderChangeMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderChangeMessage OrderChangeMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusMessage Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BettingTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ODDS")]
        ODDS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE")]
        LINE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RANGE")]
        RANGE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASIAN_HANDICAP_DOUBLE_LINE")]
        ASIAN_HANDICAP_DOUBLE_LINE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASIAN_HANDICAP_SINGLE_LINE")]
        ASIAN_HANDICAP_SINGLE_LINE = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Fields
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EX_BEST_OFFERS_DISP")]
        EX_BEST_OFFERS_DISP = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EX_BEST_OFFERS")]
        EX_BEST_OFFERS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EX_ALL_OFFERS")]
        EX_ALL_OFFERS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EX_TRADED")]
        EX_TRADED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EX_TRADED_VOL")]
        EX_TRADED_VOL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EX_LTP")]
        EX_LTP = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EX_MARKET_DEF")]
        EX_MARKET_DEF = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SP_TRADED")]
        SP_TRADED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SP_PROJECTED")]
        SP_PROJECTED = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StatusMessageErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NO_APP_KEY")]
        NO_APP_KEY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_APP_KEY")]
        INVALID_APP_KEY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_SESSION")]
        NO_SESSION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_SESSION_INFORMATION")]
        INVALID_SESSION_INFORMATION = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_AUTHORIZED")]
        NOT_AUTHORIZED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_INPUT")]
        INVALID_INPUT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CLOCK")]
        INVALID_CLOCK = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNEXPECTED_ERROR")]
        UNEXPECTED_ERROR = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIMEOUT")]
        TIMEOUT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUBSCRIPTION_LIMIT_EXCEEDED")]
        SUBSCRIPTION_LIMIT_EXCEEDED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REQUEST")]
        INVALID_REQUEST = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONNECTION_FAILED")]
        CONNECTION_FAILED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MAX_CONNECTION_LIMIT_EXCEEDED")]
        MAX_CONNECTION_LIMIT_EXCEEDED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StatusMessageStatusCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILURE")]
        FAILURE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarketChangeMessageCt
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_IMAGE")]
        SUB_IMAGE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESUB_DELTA")]
        RESUB_DELTA = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HEARTBEAT")]
        HEARTBEAT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarketChangeMessageSegmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SEG_START")]
        SEG_START = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEG")]
        SEG = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEG_END")]
        SEG_END = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarketDefinitionBettingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ODDS")]
        ODDS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE")]
        LINE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RANGE")]
        RANGE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASIAN_HANDICAP_DOUBLE_LINE")]
        ASIAN_HANDICAP_DOUBLE_LINE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASIAN_HANDICAP_SINGLE_LINE")]
        ASIAN_HANDICAP_SINGLE_LINE = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarketDefinitionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RunnerDefinitionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINNER")]
        WINNER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSER")]
        LOSER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED")]
        REMOVED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED_VACANT")]
        REMOVED_VACANT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HIDDEN")]
        HIDDEN = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLACED")]
        PLACED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PriceLadderDefinitionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLASSIC")]
        CLASSIC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FINEST")]
        FINEST = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_RANGE")]
        LINE_RANGE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderChangeMessageCt
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_IMAGE")]
        SUB_IMAGE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESUB_DELTA")]
        RESUB_DELTA = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HEARTBEAT")]
        HEARTBEAT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderChangeMessageSegmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SEG_START")]
        SEG_START = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEG")]
        SEG = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEG_END")]
        SEG_END = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderPt
    {
        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MOC")]
        MOC = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderOt
    {
        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOC")]
        LOC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MOC")]
        MOC = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AllRequestTypesExampleOpTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"heartbeat")]
        Heartbeat = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"authentication")]
        Authentication = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"marketSubscription")]
        MarketSubscription = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"orderSubscription")]
        OrderSubscription = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AllResponseTypesExampleOpTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"status")]
        Status = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"mcm")]
        Mcm = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ocm")]
        Ocm = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminatorValue = jObject.GetValue(_discriminator);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);
           
            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminator))
            {
                jObject.Remove(_discriminator);
            }
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108